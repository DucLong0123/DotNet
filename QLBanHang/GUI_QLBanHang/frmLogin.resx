<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAN/fvwjn7MZr5ezHs+bux8zm7cbC5u7HhefvxyAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADm7MYo5+7H2+btx//m7cf/5u3H/+btx//m7cf/5uzH+Obs
        x24AAAAA5evHTubtx6zm7ce75u3ImOjwySEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5O3IHObtx+vm7cf/5u3H/+btx//m7cf/5u3H/+bt
        x//m7cf/5u3H/+Xtxr3m7cf/5u3H/+btx//m7cf/5u3I7+jtyDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASkpjH4GImZixubbht763/7nBuf/Z4dL/t763/7e+
        t/+3vrf/qK6m/+Pqxf/m7cf/5u3H/+btx//m7cf/09m6/5WbmP+coqP/kpmY+dDXufLm7Mf45u3HrOLr
        xBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAiJae7/z9/+Lu8f/v/P3/7/z9/+/8
        /f/v/P3/7/z9/+/8/f/o9ff/XnqP/1N2jf9ch53/XIed/1d+lf9vfY7/zt/h/+78/f/q+Pn/i5Kb/9DW
        uP/m7cf/5+3H0f//vwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJ4iXvS3uP80d3h/8bR
        1//e6u3/7/z9/+/8/f/v/P3/z9nf/7TEz/9artT/TaXP/1nN+/9Zzfv/Xoqn/9Dg4v9fhob/z93f/9zq
        7P/r+fr/j5WV/+btx//m7cf/5+7ISgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADt7cgO6OzJQq+3
        p8OepKr/t7/G/9Dc4f/u+/z/7/z9/+/8/f/k8PP/V5a4/1nN+/9Npc//Wc37/1nN+/9tkar/7vz9/9De
        4f+tr5T/uruY/9Ld3/+Smp3/5u3H/+btx//l7MZsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5+zHYObt
        x/bm7cf/5u3H/+HnxP+jqqD/4Ozv/+/8/f99mrD/fJ+3/3Wkvf9YyPb/Wc37/02lz/9Zzfv/Wc37/16K
        p//r+fr/2ubp/72+mv/MzKD/xtLT/46VlP/m7cf/5u3H/+XsyE8AAAAAAAAAAAAAAAAAAAAAAAAAAOju
        xSzm7cf75u3H/+btx//m7cf/5u3H/+Trxv99h47/dp+4/1m34P9Zzfv/Wc37/1nN+/9Zzfv/TaXP/1nN
        +/9Zzfv/Vbrl/3mOov/r+vv/0tzc/8jT1P+KkZ7/t7+3/6uxrf+xtaro2/+2BwAAAAAAAAAAAAAAAAAA
        AAAAAAAA5u3Hg+btx//m7cf/5u3H/+btx//m7cf/5u3H/5SjnP9VwO3/Wc37/1nN+/9ZzPr/ZanM/2qq
        y/9gl7f/aqrL/2Ow1v9Zzfv/Vrvl/2GNqf9sjab/doCS/9bh5v/v/P3/7/z9/7C4wPEkJEkHAAAAAAAA
        AAAAAAAAAAAAAAAAAADl7MeV5u3H/+zx1P/m7cf/5u3H/+btx//m7cf/lKOc/1XA7f9Qqdr/UKjZ/1bA
        7P+wwcz/1ODk/9Tg5P/U4OT/ka/C/1nN+/9Zzfv/Wc37/1XA7f+Xqrj/7/z9/+/8/f/AytL/k5qc6gAA
        AAAAAAAAAAAAAAAAAAAAAAAA////Gfj57rHw9N3/9fjo//P25P/z9+X/6vDP/+btx/+Uo5z/VcDt/0pp
        w/9HVLf/Wc37/1XB7f9SuOP/SJW9/1K44/9XxfL/Wc37/1nN+/9Zzfv/VcDt/5equP/M19r/6fb4/661
        uf/f5sLVAAAAAAAAAAAAAAAAAAAAAAAAAAD///8E9fXrGujvy9zw9N3/7vPZ/+fuyf/m7cj/5u3H/4eW
        lP83fKL/OV+f/zlZn/81fqX/NX6l/zV+pf80d5z/NX6l/zV+pf81fqX/NX6l/zV+pf83fKL/doWZ/6+1
        rP+ss6b/0di6/+fsx7IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6+vMGebsx5bp8M/r5u3H/+bt
        x//m7cf/Pm6I/xq57f8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xq5
        7f88aoX/5u3H/+btx//m7cf/5e3HVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOfs
        x1/m7cf/5u3H/+btx/8weJr/Gbzx/xm88f8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xm8
        8f8ZvPH/Gbzx/y93mv/l7Mb/5u3H/+btx7b///8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA6+vEDebtx9/m7cf/5u3H/y94m/8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xm88f8ZvPH/Gbzx/xm8
        8f8ZvPH/Gbzx/xm88f8ZvPH/L3ib/+Xsxu3n7cd/2/+2BwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA5uvHMubtx+nm7cf/OX+f/x2Wxf8dlcT/HZXE/x2VxP8dlcT/HZXE/x2V
        xP8dlcT/HZXE/x2VxP8bqtv/HJ/Q/x2Yx/85f5//5ezFagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5/PCFebtxoJ2iY7ja4KJ5W2Eiuh4jo//eI6P/3iO
        j/94jo//eI6P/3iOj/94jo//eI6P/3iOj/94jo//eI6P/4OVlP/l78YxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6O7FLObt
        x/7m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3G1AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA5u7Ioebtx//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3H/+btx/7n7slLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADo6NEL5u3Hxebtx//m7cf/5u3H/+btx//p787/7vPb//L14f/1+Oj/9fjnsv//
        /0T///8PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADf378I5u3GkObtx/vm7cf/5u3H/+nvzv/p787/6/DT8fT3
        5Yf///9g////JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4uvEGufsx2Dm7seF5u7HhObs
        xlHj48YJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////8P///8Bx//+AAP/+AAAP/AAAB/4A
        AAf+AAAH+AAAB/AAAAfgAAAH4AAAB+AAAAfwAAAH+AAAD/4AAA/+AAA//wAAf/+AAH//+AB///gA///8
        AP///gH////P//////////////////////8=
</value>
  </data>
</root>